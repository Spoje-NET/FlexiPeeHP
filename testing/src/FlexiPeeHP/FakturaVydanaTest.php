<?php

namespace Test\FlexiPeeHP;

use FlexiPeeHP\FakturaVydana;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-27 at 17:32:11.
 */
class FakturaVydanaTest extends FlexiBeeRWTest
{
    /**
     * @var FakturaVydana
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new FakturaVydana();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers FlexiPeeHP\FakturaVydana::hotovostniUhrada
     */
    public function testhotovostniUhrada()
    {
        $this->makeInvoice();
        $this->object->unsetDataValue('kod');
        $result = $this->object->hotovostniUhrada($this->object->getDataValue('sumCelkZakl'));
        $this->assertEquals(201, $this->object->lastResponseCode,
            _('Invoice settle error'));
    }

    /**
     * @covers FlexiPeeHP\FakturaVydana::sparujPlatbu
     */
    public function testsparujPlatbu()
    {

    }

    /**
     * Crerate testing invoice
     * 
     * @param array $invoiceData
     */
    public function makeInvoice($invoiceData = [])
    {
        if (!isset($invoiceData['kod'])) {
            $invoiceData['kod'] = 'PeeHP'.time();
        }
        if (!isset($invoiceData['varSym'])) {
            $invoiceData['varSym'] = \Ease\Sand::randomNumber(1000, 99999);
        }
        if (!isset($invoiceData['datVyst'])) {
            $invoiceData['datVyst'] = date("Y-m-d", time() - 60 * 60 * 24);
        }
        if (!isset($invoiceData['typDokl'])) {
            $invoiceData['typDokl'] = 'code:FAKTURA';
        }
        if (!isset($invoiceData['zdrojProSkl'])) {
            $invoiceData['zdrojProSkl'] = false;
        }
        if (!isset($invoiceData['dobropisovano'])) {
            $invoiceData['dobropisovano'] = false;
        }

        if (!isset($invoiceData['polozky'])) {
            $invoiceData['bezPolozek'] = true;
        }

        if (!isset($invoiceData['sumCelkZakl'])) {
            $scale                      = pow(1000, 2);
            $invoiceData['sumCelkZakl'] = mt_rand(10 * $scale, 9000 * $scale) / $scale;
        }

        if (!isset($invoiceData['firma'])) {
            $adresar = new \FlexiPeeHP\Adresar();

            $adresy = $adresar->getFlexiData(null,
                ['typVztahuK' => 'typVztahu.odberatel']);

            $dodavatel = $adresy[array_rand($adresy)];

            $invoiceData['firma'] = 'code:'.$dodavatel['kod'];
        }

        $this->object->takeData($invoiceData);
        $result = $this->object->insertToFlexiBee();

        $id = $this->object->getLastInsertedId();
        $this->object->setDataValue('id', $id);
        return $id;
    }
}