<?php

namespace Test\FlexiPeeHP;

use FlexiPeeHP\FakturaVydana;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-27 at 17:32:11.
 */
class FakturaVydanaTest extends FlexiBeeRWTest
{
    /**
     * @var FakturaVydana
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new FakturaVydana();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {

    }

    /**
     * @covers FlexiPeeHP\FakturaVydana::hotovostniUhrada
     */
    public function testhotovostniUhrada()
    {
        $this->makeInvoice();
        $this->object->unsetDataValue('kod');
        $this->object->hotovostniUhrada($this->object->getDataValue('sumCelkZakl'));
        $this->assertEquals(201, $this->object->lastResponseCode,
            _('Invoice settle error'));
    }

    /**
     * @covers FlexiPeeHP\FakturaVydana::sparujPlatbu
     */
    public function testsparujPlatbu()
    {
        $this->makeInvoice();
        $doklad     = new \FlexiPeeHP\PokladniPohyb();
        $value      = $this->object->getDataValue('sumCelkZakl');
        $dataPohybu = [
            'kod' => 'FP'.time(),
            'typDokl' => 'code:STANDARD',
            'typPohybuK' => 'typPohybu.prijem',
            'datVyst' => date("Y-m-d", time() - 60 * 60 * 24),
            'jakUhrK' => 'jakUhrazeno.rucne1',
            'pokladna' => 'code:POKLADNA KÄŒ',
            'generovatSkl' => false,
            'zdrojProSkl' => false,
            'firma' => $this->object->getDataValue('firma'),
            'bezPolozek' => true,
            'poznam' => $this->poznam,
            'primUcet' => 'code:013001',
            'sumZklCelkem' => $value
        ];
        $doklad->takeData($dataPohybu);
        $doklad->insertToFlexiBee();
        $doklad->unsetDataValue('kod');
        $this->object->sparujPlatbu($doklad);
        $this->assertEquals(201, $doklad->lastResponseCode,
            _('Invoice match error'));
    }

    /**
     * Crerate testing invoice
     * 
     * @param array $invoiceData
     */
    public function makeInvoice($invoiceData = [])
    {
        if (!isset($invoiceData['kod'])) {
            $invoiceData['kod'] = 'PeeHP'.time();
        }
        if (!isset($invoiceData['varSym'])) {
            $invoiceData['varSym'] = \Ease\Sand::randomNumber(1000, 99999);
        }
        if (!isset($invoiceData['datVyst'])) {
            $invoiceData['datVyst'] = date("Y-m-d", time() - 60 * 60 * 24);
        }
        if (!isset($invoiceData['typDokl'])) {
            $invoiceData['typDokl'] = 'code:FAKTURA';
        }
        if (!isset($invoiceData['zdrojProSkl'])) {
            $invoiceData['zdrojProSkl'] = false;
        }
        if (!isset($invoiceData['dobropisovano'])) {
            $invoiceData['dobropisovano'] = false;
        }

        if (!isset($invoiceData['polozky'])) {
            $invoiceData['bezPolozek'] = true;
        }

        if (!isset($invoiceData['sumCelkZakl'])) {
            $scale                      = pow(1000, 2);
            $invoiceData['sumCelkZakl'] = round(mt_rand(10 * $scale,
                    9000 * $scale) / $scale, 2);
        }

        if (!isset($invoiceData['firma'])) {
            $adresar = new \FlexiPeeHP\Adresar();

            $adresy = $adresar->getFlexiData(null,
                ['typVztahuK' => 'typVztahu.odberatel']);

            $dodavatel = $adresy[array_rand($adresy)];

            $invoiceData['firma'] = 'code:'.$dodavatel['kod'];
        }

        if (!isset($invoiceData['poznam'])) {
            $invoiceData['poznam'] = $this->poznam;
        }

        $this->object->takeData($invoiceData);
        $this->object->insertToFlexiBee();

        $id = $this->object->getLastInsertedId();
        $this->object->setDataValue('id', $id);
        return $id;
    }

}
