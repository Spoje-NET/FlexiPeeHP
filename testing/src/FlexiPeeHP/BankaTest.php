<?php

namespace Test\FlexiPeeHP;

use FlexiPeeHP\Banka;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-06-10 at 12:31:59.
 */
class BankaTest extends FlexiBeeRWTest
{
    /**
     * @var Banka
     */
    protected $object;

    /**
     * Prepare testing payment
     * 
     * @param array $initialData
     * 
     * @return \FlexiPeeHP\Banka
     */
    public static function makeTestPayment($initialData = [], $dayBack = 1)
    {
        $yesterday = new \DateTime();
        $yesterday->modify('-'.$dayBack.' day');

        $testCode = 'PAY_'.\Ease\Sand::randomString();

        $payment = new \FlexiPeeHP\Banka($initialData);

        $payment->takeData(array_merge([
            'kod' => $testCode,
            'banka' => 'code:HLAVNI',
            'typPohybuK' => 'typPohybu.prijem',
            'popis' => 'FlexiPeeHP Test bank record',
            'varSym' => \Ease\Sand::randomNumber(1111, 9999),
            'specSym' => \Ease\Sand::randomNumber(111, 999),
            'bezPolozek' => true,
            'datVyst' => \FlexiPeeHP\FlexiBeeRO::dateToFlexiDate($yesterday),
            'typDokl' => \FlexiPeeHP\FlexiBeeRO::code('STANDARD')
                ], $initialData));
        if ($payment->sync()) {
            $payment->addStatusMessage($payment->getApiURL().' '.\FlexiPeeHP\FlexiBeeRO::uncode($payment->getDataValue('typPohybuK')).' '.\FlexiPeeHP\FlexiBeeRO::uncode($payment->getRecordIdent()).' '.\FlexiPeeHP\FlexiBeeRO::uncode($payment->getDataValue('sumCelkem')).' '.\FlexiPeeHP\FlexiBeeRO::uncode($payment->getDataValue('mena')),
                'success');
        } else {
            $payment->addStatusMessage(json_encode($payment->getData()), 'debug');
        }
        return $payment;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->object = new Banka();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        
    }

    /**
     * Gives You data able to insert into current evidence
     *
     * @param string $code custom record code
     *
     * @return array
     */
    public function getDataForInsert($code = 'UnitTest')
    {
        $dataForInsert               = parent::getDataForInsert($code);
        $loader                      = new \FlexiPeeHP\FlexiBeeRO(null,
            ['evidence' => 'bankovni-ucet']);
        $bankCodeRaw                 = $loader->getColumnsFromFlexibee([
            'kod'], ['limit' => 1]);
        $dataForInsert['banka']      = \FlexiPeeHP\FlexiBeeRO::code($bankCodeRaw[0]['kod']);
        $dataForInsert['typPohybuK'] = 'typPohybu.prijem';
        return $dataForInsert;
    }

    /**
     * @covers FlexiPeeHP\Banka::stahnoutVypisyOnline
     */
    public function testStahnoutVypisyOnline()
    {
        $this->assertInternalType('boolean',
            $this->object->stahnoutVypisyOnline());
    }

    /**
     * @covers FlexiPeeHP\Banka::automatickeParovani
     */
    public function testAutomatickeParovani()
    {
        $this->assertInternalType('boolean',
            $this->object->automatickeParovani());
    }
}
